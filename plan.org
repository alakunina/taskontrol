#+STARTUP: hidestars
#+STARTUP: odd
#+STARTUP: showall

* To do next:
*** TODO A simple protocol organized by trials (freq discrimination).
*** TODO Use StateMatrix in protocol.
*** TODO Fix eventsplot [1/3]
***** TODO Color disappearing earlier that it should
***** TODO Plot events, not just states
***** DONE setStatesColor, use state names
*** TODO statematrix.py : Check if there are orphan states.


* TASKontrol
*** SMclient/RTLSMclient
***** TODO SetStateMatrix() [2/3]
******* DONE sendmatrix() which uses socket.socket.send()
******* DONE basic matrix
******* TODO with schedule waves
***** TODO [#C] GetStateProgram() :EMBEDDED_C:
***** TODO [#C] SetStateProgram() :EMBEDDED_C:
***** DONE GetStateMachine()
***** DONE SetStateMachine()
***** DONE GetOutputRouting()
***** DONE SetOutputRouting()
***** TODO SetScheduledWavesDIO()
      It needs to be changed to use numpy arrays.
***** TODO SetScheduledWavesAO()
***** TODO [#C] StartDAQ()
***** TODO [#C] GetDAQScans()
***** DONE [#C] StopDAQ()
***** TODO [#C] RegisterEventsCallback()
***** TODO [#C] StopEventsCallback()
***** DONE GetEvents() (new and old versions)
***** DONE GetTime()
***** DONE GetTimeEventsAndState()
***** TODO GetAIMode()
***** TODO SetAIMode()
***** DONE ForceState() and similar ones
      I will not implement any other besides the generic ForceState().
***** TODO SetStateProgram(), GetStateProgram()
*** SoundClient
***** TODO Test that stopping sounds works.
*** Solo-like graphical module
*** Dispatcher-like module
***** Receive time, states and events.
*** EventsPlot
***** TODO Create all fill on init, and update by changing xvalues.
***** TODO Use blit()


* Bugs and fixes:
*** TODO Antipatterns:
***** http://en.wikipedia.org/wiki/Sequential_coupling (on smclient)
***** http://en.wikipedia.org/wiki/BaseBean (on netclient)
*** TODO Why are sched waves an attribute of the class?
    but the state matrix is not?
*** DONE I have been using =smIDstr.split()[0]= to extract values,
    but maybe this will change if I split things in DoQueryCmd()
*** DONE I seem to be sending extra strings after GetEvents()
    The server says: "Got:  " and then "Connection to host ended..."
    SOLUTION: I just had to restart the FSM server to avoid this.
*** DONE Check if realines can be done by reading up to a line-break
    Probably not, because if server sends a byte representing the same
    as a '\n', there is no way to tell which one of the two it was.
*** DONE Socket timeout is a weird way of stop receiving from socket.
    Although I don't know if there is a better way.  Note: I had to
    increase the timeout to avoid raising exceptions all time. So
    while in the C code it was 1ms, in the python client it is
    100ms. See NetClient.cpp: NetClient::receiveLines()
*** DONE GetTimeEventsAndState repeats code from DoQueryMatrixCmd
    It should be more modular.
*** DONE Many methods request one parameter (bool, int or float) and OK.
    There should be a method for this.
*** DONE Make orouting a dict instead of a class
*** DONE Fix getTimeEventsAndState (to use methods from BaseClient)
*** DONE Show current trial in dispatcher
*** DONE If prepareNextTrialStates has more than two states,
    they may both emit signals. That is not correct.


* Questions:
*** What is the state matrix column called CONT_OUT in SetStateMatrix?
*** What is the state matrix column called TRIG_OUT in SetStateMatrix?
*** What does BypassDout() do?
    The comment says that it sets outputs to be whatever the state
    machine would indicate, bitwise or `d with "d."
*** How are sched waves sent to the server?
    The comments seem to indicate that they get concatenated to the
    state matrix, but is this column or row-wise? Couldn't we just
    send the state matrix first and then the sched waves?
*** Do event numbers start from 1 or 0 (when using GET_EVENTS %d %d)?
*** Why do we need 'READY TO START TRIAL' (and ready_for_trial_jumpstate)?
    shouldn't that be implemented by the client with 'FORCE STATE %d'
    The only reason I see if you want the SM to do something while
    preparing the next trial, and don't want to jump out of it in the
    middle of something (but only when it reaches a special state).

    
* Python style
*** Style guide: http://www.python.org/dev/peps/pep-0008/
*** Unofficial guide: http://jaynes.colorado.edu/PythonGuidelines.html
*** TODO Do not compare with == (singleton), use 'is'
*** DONE Use .join() instead of +=
*** TODO Be explicit about which exception is catched
*** DONE endswith() instead of slicing string
*** DONE Use isinstance(obj, int) instead of comparing types
*** TODO Don't compare boolean values to True or False using ==
*** TODO Use code-testing: :CODE_TESTING:
    http://docs.python.org/library/doctest.html
    http://docs.python.org/library/unittest.html
*** Ten pitfalls:
    http://zephyrfalcon.org/labs/python_pitfalls.html
*** Code like a pythonista:
    http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html


* Notes on developing in python:
*** Ipython:
***** DONE Debugger:
******* Running 'run -d script' did not work:
	"AttributeError: Pdb instance has no attribute 'curframe'"
	https://bugs.launchpad.net/ubuntu/+source/ipython/+bug/381069
	But running "ipython -pdb" worked.
******* Trying to use pydb failed because it installed only for python2.4
******* SOLUTION: running 'ipython -pdb' worked fine.
***** DONE TAB-autocompletion:
      It adds a blank space after the completion, very annoying.
      Try for example: cd /hom<TAB>
      http://mail.scipy.org/pipermail/ipython-user/2005-March/002612.html
      https://bugs.launchpad.net/ipython/+bug/470824
******* SOLUTION: link  libreadline.so.6 to libreadline.so.5.2
	instead of linking to libreadline.so.6.0
***** Profiler has to be installed separately because of its license:
      The Debian package is called 'python-profiler'.
      In any case, it didn't really work the way I wanted. Gotta try again.
***** TODO Automatic reloading of modules
      Running one script does not reload the modules it imports, so
      any changes to those modules are ignored until reloading explicitely.


* Links and tips on tools:
*** Git:
    Manual: http://www.kernel.org/pub/software/scm/git/docs/user-manual.html
    Crash course: http://git-scm.com/course/svn.html 
    For the lazy: http://www.spheredev.org/wiki/Git_for_the_lazy
    In emacs    : http://parijatmishra.wordpress.com/2008/09/06/up-and-running-with-emacs-and-git/
    In Ubuntu   : https://help.ubuntu.com/community/Git
*** GitHub:
    git remote add origin git@github.com:sjara/TASKontrol.git
    git push origin master
*** Org-mode:
    Manual: http://orgmode.org/manual
*** Matlab (C++ API)
    http://www.mathworks.com/access/helpdesk/help/techdoc/index.html?/access/helpdesk/help/techdoc/apiref/mxgetpr.html&http://www.google.com/search?q=mxGetPr&ie=utf-8&oe=utf-8
*** Python:
    Tutorial: http://docs.python.org/tutorial/
    Reference: http://docs.python.org/reference/
    TIP: range(*args)   # call with arguments unpacked from a list
    Struct (and info on type sizes): http://docs.python.org/library/struct.html
*** Emacs:
    Hideshow minor mode: http://www.gnu.org/software/emacs/manual/html_node/emacs/Hideshow.html
*** PyQt:
***** Reference:
      http://www.riverbankcomputing.co.uk/static/Docs/PyQt4/html/classes.html
***** Matplotlib:
      http://eli.thegreenplace.net/2009/01/20/matplotlib-with-pyqt-guis/
      http://eli.thegreenplace.net/2009/05/23/more-pyqt-plotting-demos/
***** File dialog:      	
      http://zetcode.com/tutorials/pyqt4/dialogs/
*** Numpy:
    Tutorial (new): http://www.scipy.org/Tentative_NumPy_Tutorial
    Tutorial (old):
    For Matlab users: http://www.scipy.org/NumPy_for_Matlab_Users
*** BControl and RTLinux FSM:
    http://brodylab.princeton.edu/bcontrol/index.php/Main_Page
    http://code.google.com/p/rt-fsm/


* Misc:
*** I can't run the emulator on Ubuntu 9.10 because of a bug (in glibc?) about threads.
    It run fine on Ubuntu 9.04. I think the bug is related to:
    https://bugs.launchpad.net/ubuntu/+source/glib2.0/+bug/453898


* Design:
*** SMclient
    setStateMatrix, run, halt, getEvents, readyToStartTrial
*** SoundClient
*** dispatcher
    Qt widget with a run button and a printout of the time and state of the SM.
    keep time and trial count, interface to assemble matrix and get events back.
*** protocol
    design state matrix and parameters, send to dispatcher.
*** parameters
    Object holding a label and value. It will be saved for each trial.
    It can be: label+editbox or menu

